=begin
#SwiftPOS API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require 'date'

module SwiftApi
  # Defines a sale.
  class Sale
    # Transaction Id | Int32 | Required (ProcessItems, FinaliseSale).
    attr_accessor :id

    # Transaction Date/Time | DateTime | Required (ProcessItems, FinaliseSale).
    attr_accessor :sale_date

    # Member | Complex Object | Required (ProcessItems | FinaliseSale).
    attr_accessor :member

    # Items | Complex Object | Required (ProcessItems | FinaliseSale).
    attr_accessor :items

    # Payments | Complex Object | Required (ProcessItems | FinaliseSale).
    attr_accessor :media

    # Vouchers to apply to the sale | Complex Object.
    attr_accessor :supplied_vouchers

    # Vouchers issued as a result of the sale | Complex object.
    attr_accessor :issued_vouchers

    # Points Accrued | Decimal.
    attr_accessor :accrual_points


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'Id',
        :'sale_date' => :'SaleDate',
        :'member' => :'Member',
        :'items' => :'Items',
        :'media' => :'Media',
        :'supplied_vouchers' => :'SuppliedVouchers',
        :'issued_vouchers' => :'IssuedVouchers',
        :'accrual_points' => :'AccrualPoints'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'sale_date' => :'DateTime',
        :'member' => :'Member',
        :'items' => :'Array<SaleItem>',
        :'media' => :'Array<SaleMedia>',
        :'supplied_vouchers' => :'Array<SuppliedVoucher>',
        :'issued_vouchers' => :'Array<IssuedVoucher>',
        :'accrual_points' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'Id')
        self.id = attributes[:'Id']
      end

      if attributes.has_key?(:'SaleDate')
        self.sale_date = attributes[:'SaleDate']
      end

      if attributes.has_key?(:'Member')
        self.member = attributes[:'Member']
      end

      if attributes.has_key?(:'Items')
        if (value = attributes[:'Items']).is_a?(Array)
          self.items = value
        end
      end

      if attributes.has_key?(:'Media')
        if (value = attributes[:'Media']).is_a?(Array)
          self.media = value
        end
      end

      if attributes.has_key?(:'SuppliedVouchers')
        if (value = attributes[:'SuppliedVouchers']).is_a?(Array)
          self.supplied_vouchers = value
        end
      end

      if attributes.has_key?(:'IssuedVouchers')
        if (value = attributes[:'IssuedVouchers']).is_a?(Array)
          self.issued_vouchers = value
        end
      end

      if attributes.has_key?(:'AccrualPoints')
        self.accrual_points = attributes[:'AccrualPoints']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push("invalid value for 'id', id cannot be nil.")
      end

      if @sale_date.nil?
        invalid_properties.push("invalid value for 'sale_date', sale_date cannot be nil.")
      end

      if @member.nil?
        invalid_properties.push("invalid value for 'member', member cannot be nil.")
      end

      if @items.nil?
        invalid_properties.push("invalid value for 'items', items cannot be nil.")
      end

      if @media.nil?
        invalid_properties.push("invalid value for 'media', media cannot be nil.")
      end

      if @supplied_vouchers.nil?
        invalid_properties.push("invalid value for 'supplied_vouchers', supplied_vouchers cannot be nil.")
      end

      if @issued_vouchers.nil?
        invalid_properties.push("invalid value for 'issued_vouchers', issued_vouchers cannot be nil.")
      end

      if @accrual_points.nil?
        invalid_properties.push("invalid value for 'accrual_points', accrual_points cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @sale_date.nil?
      return false if @member.nil?
      return false if @items.nil?
      return false if @media.nil?
      return false if @supplied_vouchers.nil?
      return false if @issued_vouchers.nil?
      return false if @accrual_points.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          sale_date == o.sale_date &&
          member == o.member &&
          items == o.items &&
          media == o.media &&
          supplied_vouchers == o.supplied_vouchers &&
          issued_vouchers == o.issued_vouchers &&
          accrual_points == o.accrual_points
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, sale_date, member, items, media, supplied_vouchers, issued_vouchers, accrual_points].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwiftApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
