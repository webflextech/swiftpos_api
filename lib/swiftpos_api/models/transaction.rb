=begin
#SwiftPOS API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require 'date'

module SwiftApi
  # Defines a member transaction.
  class Transaction
    # Receipt Number | Int32.
    attr_accessor :id

    # Transaction Date/Time | DateTime.
    attr_accessor :transaction_date

    # Location Id | Int16.
    attr_accessor :location_id

    # Location Name | String(30).
    attr_accessor :location_name

    # Sale Total | Decimal.
    attr_accessor :transaction_total

    # Charge Total | Decimal.
    attr_accessor :charge_total

    # Payment Total | Decimal.
    attr_accessor :payment_total

    # Points Total | Decimal.
    attr_accessor :points_total

    # Transaction Items | Object
    attr_accessor :items

    # Transaction Medias | Object
    attr_accessor :medias


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'Id',
        :'transaction_date' => :'TransactionDate',
        :'location_id' => :'LocationId',
        :'location_name' => :'LocationName',
        :'transaction_total' => :'TransactionTotal',
        :'charge_total' => :'ChargeTotal',
        :'payment_total' => :'PaymentTotal',
        :'points_total' => :'PointsTotal',
        :'items' => :'Items',
        :'medias' => :'Medias'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'transaction_date' => :'DateTime',
        :'location_id' => :'Integer',
        :'location_name' => :'String',
        :'transaction_total' => :'Float',
        :'charge_total' => :'Float',
        :'payment_total' => :'Float',
        :'points_total' => :'Float',
        :'items' => :'Array<TransactionItem>',
        :'medias' => :'Array<TransactionMedia>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'Id')
        self.id = attributes[:'Id']
      end

      if attributes.has_key?(:'TransactionDate')
        self.transaction_date = attributes[:'TransactionDate']
      end

      if attributes.has_key?(:'LocationId')
        self.location_id = attributes[:'LocationId']
      end

      if attributes.has_key?(:'LocationName')
        self.location_name = attributes[:'LocationName']
      end

      if attributes.has_key?(:'TransactionTotal')
        self.transaction_total = attributes[:'TransactionTotal']
      end

      if attributes.has_key?(:'ChargeTotal')
        self.charge_total = attributes[:'ChargeTotal']
      end

      if attributes.has_key?(:'PaymentTotal')
        self.payment_total = attributes[:'PaymentTotal']
      end

      if attributes.has_key?(:'PointsTotal')
        self.points_total = attributes[:'PointsTotal']
      end

      if attributes.has_key?(:'Items')
        if (value = attributes[:'Items']).is_a?(Array)
          self.items = value
        end
      end

      if attributes.has_key?(:'Medias')
        if (value = attributes[:'Medias']).is_a?(Array)
          self.medias = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push("invalid value for 'id', id cannot be nil.")
      end

      if @transaction_date.nil?
        invalid_properties.push("invalid value for 'transaction_date', transaction_date cannot be nil.")
      end

      if @location_id.nil?
        invalid_properties.push("invalid value for 'location_id', location_id cannot be nil.")
      end

      if @location_name.nil?
        invalid_properties.push("invalid value for 'location_name', location_name cannot be nil.")
      end

      if @transaction_total.nil?
        invalid_properties.push("invalid value for 'transaction_total', transaction_total cannot be nil.")
      end

      if @charge_total.nil?
        invalid_properties.push("invalid value for 'charge_total', charge_total cannot be nil.")
      end

      if @payment_total.nil?
        invalid_properties.push("invalid value for 'payment_total', payment_total cannot be nil.")
      end

      if @points_total.nil?
        invalid_properties.push("invalid value for 'points_total', points_total cannot be nil.")
      end

      if @items.nil?
        invalid_properties.push("invalid value for 'items', items cannot be nil.")
      end

      if @medias.nil?
        invalid_properties.push("invalid value for 'medias', medias cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @transaction_date.nil?
      return false if @location_id.nil?
      return false if @location_name.nil?
      return false if @transaction_total.nil?
      return false if @charge_total.nil?
      return false if @payment_total.nil?
      return false if @points_total.nil?
      return false if @items.nil?
      return false if @medias.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          transaction_date == o.transaction_date &&
          location_id == o.location_id &&
          location_name == o.location_name &&
          transaction_total == o.transaction_total &&
          charge_total == o.charge_total &&
          payment_total == o.payment_total &&
          points_total == o.points_total &&
          items == o.items &&
          medias == o.medias
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, transaction_date, location_id, location_name, transaction_total, charge_total, payment_total, points_total, items, medias].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwiftApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
