=begin
#SwiftPOS API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require 'date'

module SwiftApi
  # Defines a product.
  class Product
    # PLU Number | Int32.
    attr_accessor :id

    # Product Code | String(13).
    attr_accessor :inventory_code

    # Product Guid | Guid.
    attr_accessor :product_guid

    # Description | Complex Object.
    attr_accessor :description

    # Product Category | Complex Object.
    attr_accessor :category

    # Inventory Group | Complex Object.
    attr_accessor :group

    # Barcodes | String[](13).
    attr_accessor :barcodes

    # Product Price | Decimal.
    attr_accessor :price

    # Product Image | Byte[].
    attr_accessor :image

    # Stock on Hand | Decimal.
    attr_accessor :stock_level


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'Id',
        :'inventory_code' => :'InventoryCode',
        :'product_guid' => :'ProductGuid',
        :'description' => :'Description',
        :'category' => :'Category',
        :'group' => :'Group',
        :'barcodes' => :'Barcodes',
        :'price' => :'Price',
        :'image' => :'Image',
        :'stock_level' => :'StockLevel'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'inventory_code' => :'String',
        :'product_guid' => :'String',
        :'description' => :'Description',
        :'category' => :'ProductCategory',
        :'group' => :'ProductGroup',
        :'barcodes' => :'Array<String>',
        :'price' => :'Float',
        :'image' => :'String',
        :'stock_level' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'Id')
        self.id = attributes[:'Id']
      end

      if attributes.has_key?(:'InventoryCode')
        self.inventory_code = attributes[:'InventoryCode']
      end

      if attributes.has_key?(:'ProductGuid')
        self.product_guid = attributes[:'ProductGuid']
      end

      if attributes.has_key?(:'Description')
        self.description = attributes[:'Description']
      end

      if attributes.has_key?(:'Category')
        self.category = attributes[:'Category']
      end

      if attributes.has_key?(:'Group')
        self.group = attributes[:'Group']
      end

      if attributes.has_key?(:'Barcodes')
        if (value = attributes[:'Barcodes']).is_a?(Array)
          self.barcodes = value
        end
      end

      if attributes.has_key?(:'Price')
        self.price = attributes[:'Price']
      end

      if attributes.has_key?(:'Image')
        self.image = attributes[:'Image']
      end

      if attributes.has_key?(:'StockLevel')
        self.stock_level = attributes[:'StockLevel']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push("invalid value for 'id', id cannot be nil.")
      end

      if @inventory_code.nil?
        invalid_properties.push("invalid value for 'inventory_code', inventory_code cannot be nil.")
      end

      if @product_guid.nil?
        invalid_properties.push("invalid value for 'product_guid', product_guid cannot be nil.")
      end

      if @description.nil?
        invalid_properties.push("invalid value for 'description', description cannot be nil.")
      end

      if @category.nil?
        invalid_properties.push("invalid value for 'category', category cannot be nil.")
      end

      if @group.nil?
        invalid_properties.push("invalid value for 'group', group cannot be nil.")
      end

      if @barcodes.nil?
        invalid_properties.push("invalid value for 'barcodes', barcodes cannot be nil.")
      end

      if @price.nil?
        invalid_properties.push("invalid value for 'price', price cannot be nil.")
      end

      if @image.nil?
        invalid_properties.push("invalid value for 'image', image cannot be nil.")
      end

      if @image !~ Regexp.new(/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/)
        invalid_properties.push("invalid value for 'image', must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.")
      end

      if @stock_level.nil?
        invalid_properties.push("invalid value for 'stock_level', stock_level cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @inventory_code.nil?
      return false if @product_guid.nil?
      return false if @description.nil?
      return false if @category.nil?
      return false if @group.nil?
      return false if @barcodes.nil?
      return false if @price.nil?
      return false if @image.nil?
      return false if @image !~ Regexp.new(/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/)
      return false if @stock_level.nil?
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] image Value to be assigned
    def image=(image)
      if image.nil?
        fail ArgumentError, "image cannot be nil"
      end

      if image !~ Regexp.new(/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/)
        fail ArgumentError, "invalid value for 'image', must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/."
      end

      @image = image
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          inventory_code == o.inventory_code &&
          product_guid == o.product_guid &&
          description == o.description &&
          category == o.category &&
          group == o.group &&
          barcodes == o.barcodes &&
          price == o.price &&
          image == o.image &&
          stock_level == o.stock_level
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, inventory_code, product_guid, description, category, group, barcodes, price, image, stock_level].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwiftApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
