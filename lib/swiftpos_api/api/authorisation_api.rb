=begin
#SwiftPOS API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require "uri"

module SwiftApi
  class AuthorisationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Gets an api key.
    # Authenticates an API client by validating a SwiftPOS clerk Id and password in addition to a SwiftPOS location Id.  Successful authentication will result in an API key being returned in the response which needs to be provided for all further interaction with SwiftApi.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :location_id Location to request an api key for.
    # @option opts [Integer] :user_id Clerk Id.
    # @option opts [String] :password Clerk Password.
    # @return [AuthorisationResponse]
    def authorisation_get(opts = {}, headers)
    # @return [AuthorisationResponse]
      data, _status_code, _headers = authorisation_get_with_http_info(opts,headers)
      return data
    end

    # Gets an api key.
    # Authenticates an API client by validating a SwiftPOS clerk Id and password in addition to a SwiftPOS location Id.  Successful authentication will result in an API key being returned in the response which needs to be provided for all further interaction with SwiftApi.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :location_id Location to request an api key for.
    # @option opts [Integer] :user_id Clerk Id.
    # @option opts [String] :password Clerk Password.
    # @return [Array<(AuthorisationResponse, Fixnum, Hash)>] AuthorisationResponse data, response status code and response headers
    def authorisation_get_with_http_info(opts = {},headers)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AuthorisationApi.authorisation_get ..."
      end
      # resource path
      local_var_path = "/api/Authorisation"

      # query parameters
      query_params = {}
      query_params[:'locationId'] = opts[:'location_id'] if !opts[:'location_id'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'password'] = opts[:'password'] if !opts[:'password'].nil?

      # header parameters
      header_params = headers
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AuthorisationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthorisationApi#authorisation_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
