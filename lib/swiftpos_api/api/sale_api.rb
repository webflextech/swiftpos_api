=begin
#SwiftPOS API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require "uri"

module SwiftApi
  class SaleApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Finalises a sale.
    # Processes a sale which is sent directly to SwiftPOS Back Office.  Processing a sale in this way is capabale of accepting and issuing vouchers.  The request model requires different properties to be set depending on whether the Process or Finalise process is being run.  If a member is passed in with the sale object that doesn’t exist or has a MemberId of 0 then a new member will be created.  In such a scenario, you should be providing at a bare minimum first and last names and a classification (which only requires ClassificationId to be populated with anything other than default values).
    # @param sale The sale to finalise.
    # @param api_key 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def sale_finalise_sale(sale, api_key, opts = {})
      sale_finalise_sale_with_http_info(sale, api_key, opts)
      return nil
    end

    # Finalises a sale.
    # Processes a sale which is sent directly to SwiftPOS Back Office.  Processing a sale in this way is capabale of accepting and issuing vouchers.  The request model requires different properties to be set depending on whether the Process or Finalise process is being run.  If a member is passed in with the sale object that doesn’t exist or has a MemberId of 0 then a new member will be created.  In such a scenario, you should be providing at a bare minimum first and last names and a classification (which only requires ClassificationId to be populated with anything other than default values).
    # @param sale The sale to finalise.
    # @param api_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def sale_finalise_sale_with_http_info(sale, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SaleApi.sale_finalise_sale ..."
      end
      # verify the required parameter 'sale' is set
      if @api_client.config.client_side_validation && sale.nil?
        fail ArgumentError, "Missing the required parameter 'sale' when calling SaleApi.sale_finalise_sale"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling SaleApi.sale_finalise_sale"
      end
      # resource path
      local_var_path = "/api/Sale/Finalise"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])
      header_params[:'ApiKey'] = api_key

      # form parameters
      form_params = {}

      # proxy parameters
      proxy_params = opts[:'proxy'] if !opts[:'proxy'].nil?  
      proxyuserpwd_params = opts[:'proxyuserpwd'] if !opts[:'proxyuserpwd'].nil?

      # http body (model)
      post_body = @api_client.object_to_http_body(sale)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :proxy_params => proxy_params,
        :proxyuserpwd_params => proxyuserpwd_params,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SaleApi#sale_finalise_sale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all SwiftPOS sales matching the specified search criteria.
    # The saleId parameter allows users of the api to exclude sales that have been previously retrieved.  Providing a value for the saleId parameter will result in the api returning sales with an id greater than the provided value.  This means that users can periodically call the api to retrieve only those sales that have occurred since the last call to the api.  The id parameter works with the maxRecords parameter, which limits the maximum number of sales that can be returned in a response.  A maxRecords value greater than 0 results in the response being limited to the provided maximum number of sales.  <br /><br /><b>Transaction Types: </b><br />  Transaction Type 0 is the most common Transaction Type, which indicates a standard sale.  Other Transaction Types, most notably <b>0-98 and 150-500 (excluding types listed below)</b> also indicate a standard sale.  <br /><br />  00099 No Sale <br />  00100 Cancelled Sale <br />  00101 Door Access <br />  00102 Clerk Log On <br />  00103 Clerk Log Off <br />  00112 Clock On <br />  00113 Clock Off <br />  00114 Start Break <br />  00115 End Break <br />  00525 Stocktake <br />  00526 Transfer/s Out <br />  00527 Transfer/s In <br />  00990 Cash Drop <br />  00999 Paid Out <br />  05005 Stk-Shrinkage <br />  05010 Purchases <br />  05011 Purchase Credits <br />  08001 Stk-Receipts <br />  08002 Stk-Adjustments <br />  08003 Stk-Damaged <br />  08004 Stk-Returns <br />  08005 Stk-Wastage <br />  23456 Cash Up <br />  29700 Points Balance <br />  29800 Stock Promo Draw <br />  29805 Attendance Draw <br />  29810 Member Draw <br />
    # @param api_key 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :sale_id The last sale id received in a previous response.
    # @option opts [Integer] :max_records The maximum number of sales to return.
    # @option opts [String] :from The from date for sales in the format yyyy-MM-dd or yyyy-MM-dd HH:mm:ss.
    # @option opts [String] :to The to date for sales in the format yyyy-MM-dd or yyyy-MM-dd HH:mm:ss.
    # @return [Array<SwiftPOSVenue>]
    def sale_get(api_key, opts = {})
      data, _status_code, _headers = sale_get_with_http_info(api_key, opts)
      return data
    end

    # Gets all SwiftPOS sales matching the specified search criteria.
    # The saleId parameter allows users of the api to exclude sales that have been previously retrieved.  Providing a value for the saleId parameter will result in the api returning sales with an id greater than the provided value.  This means that users can periodically call the api to retrieve only those sales that have occurred since the last call to the api.  The id parameter works with the maxRecords parameter, which limits the maximum number of sales that can be returned in a response.  A maxRecords value greater than 0 results in the response being limited to the provided maximum number of sales.  &lt;br /&gt;&lt;br /&gt;&lt;b&gt;Transaction Types: &lt;/b&gt;&lt;br /&gt;  Transaction Type 0 is the most common Transaction Type, which indicates a standard sale.  Other Transaction Types, most notably &lt;b&gt;0-98 and 150-500 (excluding types listed below)&lt;/b&gt; also indicate a standard sale.  &lt;br /&gt;&lt;br /&gt;  00099 No Sale &lt;br /&gt;  00100 Cancelled Sale &lt;br /&gt;  00101 Door Access &lt;br /&gt;  00102 Clerk Log On &lt;br /&gt;  00103 Clerk Log Off &lt;br /&gt;  00112 Clock On &lt;br /&gt;  00113 Clock Off &lt;br /&gt;  00114 Start Break &lt;br /&gt;  00115 End Break &lt;br /&gt;  00525 Stocktake &lt;br /&gt;  00526 Transfer/s Out &lt;br /&gt;  00527 Transfer/s In &lt;br /&gt;  00990 Cash Drop &lt;br /&gt;  00999 Paid Out &lt;br /&gt;  05005 Stk-Shrinkage &lt;br /&gt;  05010 Purchases &lt;br /&gt;  05011 Purchase Credits &lt;br /&gt;  08001 Stk-Receipts &lt;br /&gt;  08002 Stk-Adjustments &lt;br /&gt;  08003 Stk-Damaged &lt;br /&gt;  08004 Stk-Returns &lt;br /&gt;  08005 Stk-Wastage &lt;br /&gt;  23456 Cash Up &lt;br /&gt;  29700 Points Balance &lt;br /&gt;  29800 Stock Promo Draw &lt;br /&gt;  29805 Attendance Draw &lt;br /&gt;  29810 Member Draw &lt;br /&gt;
    # @param api_key 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :sale_id The last sale id received in a previous response.
    # @option opts [Integer] :max_records The maximum number of sales to return.
    # @option opts [String] :from The from date for sales in the format yyyy-MM-dd or yyyy-MM-dd HH:mm:ss.
    # @option opts [String] :to The to date for sales in the format yyyy-MM-dd or yyyy-MM-dd HH:mm:ss.
    # @return [Array<(Array<SwiftPOSVenue>, Fixnum, Hash)>] Array<SwiftPOSVenue> data, response status code and response headers
    def sale_get_with_http_info(api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SaleApi.sale_get ..."
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling SaleApi.sale_get"
      end
      # resource path
      local_var_path = "/api/Sale"

      # query parameters
      query_params = {}
      query_params[:'saleId'] = opts[:'sale_id'] if !opts[:'sale_id'].nil?
      query_params[:'maxRecords'] = opts[:'max_records'] if !opts[:'max_records'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'ApiKey'] = api_key

      # form parameters
      form_params = {}

      # proxy parameters
      proxy_params = opts[:'proxy'] if !opts[:'proxy'].nil?  
      proxyuserpwd_params = opts[:'proxyuserpwd'] if !opts[:'proxyuserpwd'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :proxy_params => proxy_params,
        :proxyuserpwd_params => proxyuserpwd_params,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SwiftPOSVenue>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SaleApi#sale_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Processes sale items prior to finalising a sale.
    # Validates and prepares a sale for processing directly to SwiftPOS Back Office.  The request model requires different properties to be set depending on whether the Process or Finalise process is being run.  If a member is passed in with the sale object that doesn’t exist or has a MemberId of 0 then a new member will be created.  In such a scenario, you should be providing at a bare minimum first and last names and a classification (which only requires ClassificationId to be populated with anything other than default values).
    # @param sale The sale to process.
    # @param api_key 
    # @param [Hash] opts the optional parameters
    # @return [Sale]
    def sale_process_items(sale, api_key, opts = {})
      data, _status_code, _headers = sale_process_items_with_http_info(sale, api_key, opts)
      return data
    end

    # Processes sale items prior to finalising a sale.
    # Validates and prepares a sale for processing directly to SwiftPOS Back Office.  The request model requires different properties to be set depending on whether the Process or Finalise process is being run.  If a member is passed in with the sale object that doesn’t exist or has a MemberId of 0 then a new member will be created.  In such a scenario, you should be providing at a bare minimum first and last names and a classification (which only requires ClassificationId to be populated with anything other than default values).
    # @param sale The sale to process.
    # @param api_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Sale, Fixnum, Hash)>] Sale data, response status code and response headers
    def sale_process_items_with_http_info(sale, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SaleApi.sale_process_items ..."
      end
      # verify the required parameter 'sale' is set
      if @api_client.config.client_side_validation && sale.nil?
        fail ArgumentError, "Missing the required parameter 'sale' when calling SaleApi.sale_process_items"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling SaleApi.sale_process_items"
      end
      # resource path
      local_var_path = "/api/Sale/Process"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])
      header_params[:'ApiKey'] = api_key

      # form parameters
      form_params = {}

      # proxy parameters
      proxy_params = opts[:'proxy'] if !opts[:'proxy'].nil?  
      proxyuserpwd_params = opts[:'proxyuserpwd'] if !opts[:'proxyuserpwd'].nil?

      # http body (model)
      post_body = @api_client.object_to_http_body(sale)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :proxy_params => proxy_params,
        :proxyuserpwd_params => proxyuserpwd_params,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Sale')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SaleApi#sale_process_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
