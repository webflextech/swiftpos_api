=begin
#SwiftPOS API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require 'spec_helper'
require 'json'

# Unit tests for SwiftApi::MemberApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'MemberApi' do
  before do
    # run before each test
    @instance = SwiftApi::MemberApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of MemberApi' do
    it 'should create an instance of MemberApi' do
      expect(@instance).to be_instance_of(SwiftApi::MemberApi)
    end
  end

  # unit tests for member_get
  # Gets a member by Id.
  # 
  # @param id The id of the member.
  # @param api_key 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :member_type The type of member search to perform (0 &#x3D; Standard, 3 &#x3D; Alternate, 5 &#x3D; EGM).
  # @return [Member]
  describe 'member_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for member_get_0
  # Gets a member by name or email address.
  # 
  # @param api_key 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :first_name First name must be used with surname.
  # @option opts [String] :surname Surname must be used with first name.
  # @option opts [String] :email_address Email address.
  # @return [Member]
  describe 'member_get_0 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for member_post
  # Creates a new member.
  # Creates a new member in SwiftPOS Back Office.  Please note that when creating a new member, you must provide a value for FirstName, Surname, EmailAddress and ClassificationId as a bare minimum.  The ClassificationId must be a valid classification in SwiftPOS that is either assigned to all venues or the venue that the LocationId from the request is assigned to.  Refer to the model below for the full list of fields that can be set when creating a new member.  It is also possible to either manually set the desired MemberId to assign to the new member or have one automatically generated.  By setting Id to 0 or not providing it at all, the next available number will be automatically assigned, otherwise the provided Id will attempt to be assigned to the new member.
  # @param member The member to create.
  # @param api_key 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'member_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for member_put
  # Updates an existing member.
  # Updates the details of a SwiftPOS member.  It is possible to update the member’s classification but only if the member is already assigned to a classification with a ClassificationType of 1 (Back Office Primary).  The ClassificationId property can be changed to any other valid classification that exists in SwiftPOS.  The members account active from / active to dates can be updated, but only for the account with the AccountType of 1 (Back Office Cash Acccount).  Refer to the model below for the full list of which fields can be modified.
  # @param member The member to update.
  # @param api_key 
  # @param [Hash] opts the optional parameters
  # @return [Member]
  describe 'member_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for member_put_account
  # Tops up a member account.
  # Tops up a member’s cash account and creates an associated back office sale for auditing purposes.  If ePurseId is 0 then a back office cash account topup will be performed.  If ePurseId is between 1 and 5 then an ePurse cash account topup will be performed.
  # @param id The member id.
  # @param amount The amount to topup.
  # @param media_id The media that the topup was paid with.
  # @param api_key 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :member_type The type of member.
  # @option opts [Integer] :e_purse_id The id of the ePurse account to topup.
  # @return [nil]
  describe 'member_put_account test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
